"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.pair = void 0;
var graph_ts_1 = require("@graphprotocol/graph-ts");
var pair = /** @class */ (function (_super) {
    __extends(pair, _super);
    function pair(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    pair.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save pair entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save pair entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("pair", id.toString(), this);
    };
    pair.load = function (id) {
        return graph_ts_1.store.get("pair", id);
    };
    Object.defineProperty(pair.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(pair.prototype, "count", {
        get: function () {
            var value = this.get("count");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("count", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(pair.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            return value.toBytes();
        },
        set: function (value) {
            this.set("owner", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(pair.prototype, "spender", {
        get: function () {
            var value = this.get("spender");
            return value.toBytes();
        },
        set: function (value) {
            this.set("spender", graph_ts_1.Value.fromBytes(value));
        },
        enumerable: false,
        configurable: true
    });
    return pair;
}(graph_ts_1.Entity));
exports.pair = pair;
