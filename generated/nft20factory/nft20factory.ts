// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class pairCreated extends ethereum.Event {
  get params(): pairCreated__Params {
    return new pairCreated__Params(this);
  }
}

export class pairCreated__Params {
  _event: pairCreated;

  constructor(event: pairCreated) {
    this._event = event;
  }

  get originalNFT(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPair(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _type(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class nft20factory__getPairByNftAddressResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: string;
  value4: string;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: string,
    value4: string,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class nft20factory extends ethereum.SmartContract {
  static bind(address: Address): nft20factory {
    return new nft20factory("nft20factory", address);
  }

  counter(): BigInt {
    let result = super.call("counter", "counter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_counter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("counter", "counter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPairByNftAddress(index: BigInt): nft20factory__getPairByNftAddressResult {
    let result = super.call(
      "getPairByNftAddress",
      "getPairByNftAddress(uint256):(address,address,uint256,string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new nft20factory__getPairByNftAddressResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt()
    );
  }

  try_getPairByNftAddress(
    index: BigInt
  ): ethereum.CallResult<nft20factory__getPairByNftAddressResult> {
    let result = super.tryCall(
      "getPairByNftAddress",
      "getPairByNftAddress(uint256):(address,address,uint256,string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new nft20factory__getPairByNftAddressResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt()
      )
    );
  }

  indexToNft(param0: BigInt): Address {
    let result = super.call("indexToNft", "indexToNft(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_indexToNft(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("indexToNft", "indexToNft(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  logic(): Address {
    let result = super.call("logic", "logic():(address)", []);

    return result[0].toAddress();
  }

  try_logic(): ethereum.CallResult<Address> {
    let result = super.tryCall("logic", "logic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftToToken(param0: Address): Address {
    let result = super.call("nftToToken", "nftToToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_nftToToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("nftToToken", "nftToToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeLogicCall extends ethereum.Call {
  get inputs(): ChangeLogicCall__Inputs {
    return new ChangeLogicCall__Inputs(this);
  }

  get outputs(): ChangeLogicCall__Outputs {
    return new ChangeLogicCall__Outputs(this);
  }
}

export class ChangeLogicCall__Inputs {
  _call: ChangeLogicCall;

  constructor(call: ChangeLogicCall) {
    this._call = call;
  }

  get _newLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeLogicCall__Outputs {
  _call: ChangeLogicCall;

  constructor(call: ChangeLogicCall) {
    this._call = call;
  }
}

export class FixCall extends ethereum.Call {
  get inputs(): FixCall__Inputs {
    return new FixCall__Inputs(this);
  }

  get outputs(): FixCall__Outputs {
    return new FixCall__Outputs(this);
  }
}

export class FixCall__Inputs {
  _call: FixCall;

  constructor(call: FixCall) {
    this._call = call;
  }
}

export class FixCall__Outputs {
  _call: FixCall;

  constructor(call: FixCall) {
    this._call = call;
  }
}

export class Nft20PairCall extends ethereum.Call {
  get inputs(): Nft20PairCall__Inputs {
    return new Nft20PairCall__Inputs(this);
  }

  get outputs(): Nft20PairCall__Outputs {
    return new Nft20PairCall__Outputs(this);
  }
}

export class Nft20PairCall__Inputs {
  _call: Nft20PairCall;

  constructor(call: Nft20PairCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _nftOrigin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nftType(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Nft20PairCall__Outputs {
  _call: Nft20PairCall;

  constructor(call: Nft20PairCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetValueCall extends ethereum.Call {
  get inputs(): SetValueCall__Inputs {
    return new SetValueCall__Inputs(this);
  }

  get outputs(): SetValueCall__Outputs {
    return new SetValueCall__Outputs(this);
  }
}

export class SetValueCall__Inputs {
  _call: SetValueCall;

  constructor(call: SetValueCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _value(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetValueCall__Outputs {
  _call: SetValueCall;

  constructor(call: SetValueCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
